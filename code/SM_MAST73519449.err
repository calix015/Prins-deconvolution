── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.0     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.2     ✔ tibble    3.2.0
✔ lubridate 1.9.2     ✔ tidyr     1.3.0
✔ purrr     1.0.1     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
Attaching SeuratObject

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Warning message:
In asMethod(object) :
  sparse->dense coercion: allocating vector of size 1.8 GiB
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Using  as id variables
No dimnames in `exprsArray`, assuming `fData` and `cData` are sorted according to `exprsArray`
Assuming data assay in position 1, with name Et is log-transformed.

Done!
Refitting on reduced model...

Done!
Error in eval(parse(text = temp)) : 
  object 'cluster_lrTest.table.Non' not found
Calls: buildSignatureMatrixMAST -> eval -> eval
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Execution halted
